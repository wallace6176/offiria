<?php/** * @category	Plugins * @package		JomSocial * @copyright (C) 2008 by Slashes & Dots Sdn Bhd - All rights reserved! * @license		GNU/GPL, see LICENSE.php */// no direct accessdefined( '_JEXEC' ) or die( 'Restricted access' );define('FINDER_PATH_INDEXER', JPATH_ROOT . '/components/com_finder/helpers/indexer');JLoader::register('FinderIndexerHelper', FINDER_PATH_INDEXER . '/helper.php');JLoader::register('FinderIndexerQuery', FINDER_PATH_INDEXER . '/query.php');JLoader::register('FinderIndexerResult', FINDER_PATH_INDEXER . '/result.php');jimport( 'joomla.plugin.plugin' );jimport( 'joomla.xfactory' );$lang			= JFactory::getLanguage();$my				= JXFactory::getUser();$config			= new JXConfig();// First load account setting language (if any) to override joomla! language$defLanguage	= ($config->getLanguage() != '') ? $config->getLanguage() : $lang->get('default');// Second load user personal language (if any) to override default language$siteLanguage	= (intval($my->id) > 0 && $my->getParam('language') != '') ? $my->getParam('language') : $defLanguage;$lang->setLanguage($siteLanguage);$result = $lang->load('lib_xjoomla');/** * Editor Jomsocial Photo Button * * @package Editors-xtd * @since 1.5 */class plgSearchStreams extends JPlugin{	/**	 * Constructor	 *	 * For php4 compatability we must not use the __constructor as a constructor for plugins	 * because func_get_args ( void ) returns a copy of all passed arguments NOT references.	 * This causes problems with cross-referencing necessary for the observer design pattern.	 *	 * @param 	object $subject The object to observe	 * @param 	array  $config  An array that holds the plugin configuration	 * @since 1.5	 */	public function __construct(& $subject, $config)	{		parent::__construct($subject, $config);		//$this->loadLanguage();	}	/**	 * Display the button	 *	 * @return array A two element array of ( imageName, textToInsert )	 */	function onContentSearch()	{		//global $mainframe;		$mainframe = JFactory::getApplication();		$args = func_get_args();				if (empty($args[0]))		{			return array();		}				// array(4) { [0]=> string(10) "she is asd" [1]=> string(5) "exact/all/any" [2]=> string(6) "oldest/newest/alpha/category/popular" [3]=> NULL } 		// Group ID and Filter Range will be from "areas" parameter in com_search form		if (is_null($args[3]))		{			$areas = 0;		}		else		{			$areas = is_array($args[3]) ? $args[3][0] : $args[3];		}				if (preg_match('/_\d\w$/', $areas))		{			$splitVal	= explode('_', $areas);			$groupId	= $splitVal[0];			$filterRange= $splitVal[1]; // _2w (2 weeks), _1m (1 month), _3m (3 months), _0a (all)			$rangeCond	= $this->_getDateRange($filterRange);		}		else		{			// no filter range info provided;			$groupId	= $areas;			$filterRange= '0a';			$rangeCond	= $this->_getDateRange($filterRange);		}						// search for all/streams/comments/files/people is from "searchphrase" parameter in com_search form		$searchFor = $args[1];		// custom class loader		JLoader::register('FinderIndexerStemmer', FINDER_PATH_INDEXER . '/stemmer.php');				FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance('porter_en'); // option porter_en/snowball		//FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance('snowball'); // option porter_en/snowball		$option = array("input" => $args[0], "empty" => "0", "language" => "", "filter" => 0, "filters" => array()); 		$keyTerm = new FinderIndexerQuery($option);				$db			= JFactory::getDbo();		$query		= $db->getQuery(true);				// This part get all groups that the logined user is permitted to see.		$my			= JXFactory::getUser();		if (!$my->isAdmin())		{			$query->select('id');			$query->from('#__groups');			// group must not be archived and access is public			$query->where(' ( '.$db->quoteName('archived').' = 0 AND '.$db->quoteName('access').' = 0 ) ', 'OR');			// OR group is private and user is a member of the private group			$query->where('( '.$db->quoteName('access').' = 1 AND `members` REGEXP \'^'.$my->id.'[^0-9]|[^0-9]'.$my->id.'[^0-9]|[^0-9]'.$my->id.'$\''.' )');			$db->setQuery($query);			$allowGroups= $db->loadObjectList();			for ($i = 0; $i < count( $allowGroups ); $i++)			{				$allowGroupId[] = $allowGroups[$i]->id;			}			$allowGroupId[] = 0;			$allowGroupCond = ' ( group_id IN ('.implode(',', $allowGroupId).') ) ';		}		else		{			$allowGroupCond = '';		}				//$limit		= 20;		$condStream	= $condComment = $condFile = $condProfile = array();		$stream		= $comment = $files = $people = $user = $rec = array();		$streamId	= $userId = $keywords = array();							$condition	= '';		$count		= 0;				foreach($keyTerm->included as $searchKey)		{			$keywords[] = $searchKey->term;			// prepare stream condition			$condStream[$count]		= " ( message LIKE ".$db->quote('%'.$searchKey->term.'%');			// prepare comment condition			//$condComment[$count]	= " ( comment LIKE ".$db->quote('%'.$searchKey->term.'%');			// prepare files condition			$condFile[$count]		= " ( filename LIKE ".$db->quote('%'.$searchKey->term.'%');			// prepare people condition			$condProfile[$count]	= " ( value LIKE ".$db->quote('%'.$searchKey->term.'%');			$condUser[$count]		= " ( name LIKE ".$db->quote('%'.$searchKey->term.'%'). " OR username LIKE ".$db->quote('%'.$searchKey->term.'%');						if ($searchKey->term != $searchKey->stem)			{				$keywords[] = $searchKey->stem;				$condStream[$count]		.= " OR message LIKE ".$db->quote('%'.$searchKey->stem.'%');					//$condComment[$count]	.= " OR comment LIKE ".$db->quote('%'.$searchKey->stem.'%');				$condFile[$count]		.= " OR filename LIKE ".$db->quote('%'.$searchKey->stem.'%');					$condProfile[$count]	.= " OR value LIKE ".$db->quote('%'.$searchKey->stem.'%');					$condUser[$count]		.= " OR name LIKE ".$db->quote('%'.$searchKey->stem.'%'). " OR username LIKE ".$db->quote('%'.$searchKey->stem.'%');				}						$condStream[$count]		.= ' ) ';			//$condComment[$count]	.= ' ) ';			$condFile[$count]		.= ' ) ';			$condProfile[$count]	.= ' ) ';			$condUser[$count]		.= ' ) ';						$count++;		}				if ($searchFor == 'all' || $searchFor == 'streams')		{			// The following part search for the stream message itself			$query->clear();			$query->select('id, id as message_id, type, user_id, message, created');			$query->from('#__stream');			if (!empty($condStream))			{				$query->where('('.implode(" OR ", $condStream).')');			}			if ($groupId)			{				$query->where('group_id = '.$db->quote($groupId));				}			else			{				if (!empty($allowGroupCond))				{					$query->where($allowGroupCond, 'OR');				}			}			if (!empty($rangeCond))			{				$query->where($rangeCond);			}			$query->order('created DESC');			$stream = $this->_arrangeRecords($query, $streamId);		}		/*if ($searchFor == 'all' || $searchFor == 'comments')		{			// Get all stream messages where comment contains the search key words.			$query->clear();			$query->select('id, stream_id as message_id, "comment" as type, user_id, group_id, comment as message, created');			$query->from('#__stream_comments');			if (!empty($condComment))			{				$query->where('('.implode(" OR ", $condComment).')');			}			if ($groupId)			{				$query->where('group_id = '.$db->quote($groupId));				}			if (!empty($rangeCond))			{				$query->where($rangeCond);			}			$query->order('created DESC');			//echo $query;			$comment = $this->_arrangeRecords($query, &$streamId);		}		*/		if ($searchFor == 'all' || $searchFor == 'files')		{			// Get all files where filename contains the search key words.			$query->clear();			$query->select('id, stream_id as message_id, "files" as type, user_id, group_id, filename as message, created');			$query->from('#__stream_files');			if (!empty($condFile))			{				$query->where('('.implode(" OR ", $condFile).')');			}			if ($groupId)			{				$query->where('group_id = '.$db->quote($groupId));				}			else			{				if (!empty($allowGroupCond))				{					$query->where($allowGroupCond, 'OR');				}			}			if (!empty($rangeCond))			{				$query->where($rangeCond);			}			$query->order('created DESC');			//echo $query;			// pass in empty array for second parameter,streamId, to avoid filtering off files 			// although the stream message/comments might have the searching keywords			$fileId = array();			$files = $this->_arrangeRecords($query, $fileId);		}				if ($searchFor == 'all' || $searchFor == 'people')		{			// Get all user where username, title, work, about me contains the search key words.			$query->clear();			$query->select('id');			$query->from('#__users');			if (!empty($condProfile))			{				$query->where('('.implode(" OR ", $condUser).')');			}				$user = $this->_arrangeUserRecords($query, $userId);							// Get all user where username, title, work, about me contains the search key words.			$query->clear();			$query->select('id, user_id, field, value');			$query->from('#__user_details');			if (!empty($condProfile))			{				$query->where('('.implode(" OR ", $condProfile).')');			}			$query->group('user_id');				$people = $this->_arrangeProfileRecords($query, $userId);				}				$rec = $this->_appendArray($rec, $stream);		$rec = $this->_appendArray($rec, $comment);		$rec = $this->_appendArray($rec, $files);		$rec = $this->_appendArray($rec, $user);		$rec = $this->_appendArray($rec, $people);				foreach($rec as $index => $recRow)		{			$recRow->title	= $this->_minifiedResult($this->_processMessage($recRow->title, $keywords));			$rec[$index]	= $recRow;		}						return $rec;	}		private function _processMessage($msg, $keywords)	{		require_once(JPATH_ROOT .DS.'components'.DS.'com_stream'.DS.'factory.php');		//$msg = StreamMessage::format($msg);		$msg = html_entity_decode($msg);		$msg = strip_tags($msg);		$msg = nl2br($msg);		if (empty($keywords))		{			return $msg;		}				foreach($keywords as $index => $keyword)		{			$replace[$index]	= '<span class="found-words">'.$keyword.'</span>';			$keywords[$index]	= '/'.$keyword.'/i';		}		return preg_replace($keywords, $replace, $msg);	}		private function _minifiedResult($text)	{		$posOffset = 40;		$initialPos = strpos($text, '<span class="found-words"');				$finalPos = strrpos($text, '</span>');				if ($initialPos > $posOffset)					{			$text = '...'.substr($text, ($initialPos - $posOffset));		}		if ($finalPos < (strlen($text) - $posOffset))		{			$finalPos += $posOffset;			$text = substr($text, 0, $finalPos).'...';		}		return $text;	}		private function _appendArray($main, $addOn)	{		for($i = 0; $i < count($addOn); $i++)		{			$main[] = $addOn[$i];		}				return $main;	}		private function _arrangeRecords($query, &$streamId)	{				$records = array();				$db		= JFactory::getDbo();		$db->setQuery($query);		$list	= $db->loadObjectList();				foreach ($list as $record)		{			if (!in_array($record->message_id, $streamId))			{						$streamId[] = $record->message_id;					$user = JXFactory::getUser($record->user_id);				$row = new stdClass();				$row->text = $user->get('name');				$row->title = $record->message;				$row->created = $record->created;				$row->browsernav = 1; // 1 means open in new window/tab				if (JString::strtolower($record->type) == 'files')				{					$row->href = JRoute::_('index.php?option=com_stream&view=system&task=download&file_id='.$record->id);					$row->addhref = JRoute::_('index.php?option=com_stream&view=message&task=show&message_id='.$record->message_id);					$row->section = JText::_('PLG_SEARCH_LABEL_DOWNLOAD');				}				else				{					$row->href = JRoute::_('index.php?option=com_stream&view=message&task=show&message_id='.$record->message_id);					$row->addhref = $row->href;					//$row->section = JText::sprintf('PLG_SEARCH_LABEL_VIEW_TYPE', ucfirst($record->type));					$row->section = JText::_('PLG_SEARCH_LABEL_VIEW');									}				$row->objectInfo = $record;				$records[] = $row;			}			else			{				// append to the stream message?			}							}				return $records;	}			private function _arrangeUserRecords($query, &$userId)	{				$records = array();				$db		= JFactory::getDbo();		$db->setQuery($query);		$list	= $db->loadObjectList();				foreach ($list as $record)		{			$user = JXFactory::getUser($record->id);			$row = new stdClass();			$row->section = JText::_('profiles');			$row->text = $user->get('name');			$row->browsernav = 1; // 1 means open in new window/tab			$row->created = '';			$row->href = JRoute::_('index.php?option=com_profile&view=display&task=bio&user='.$user->username);			$row->title = $user->get('name').' @'.$user->get('username');			$row->objectInfo = $user;			$userId[] = $record->id;			$records[] = $row;		}				return $records;	}		private function _arrangeProfileRecords($query, &$userId)	{		$records = array();		$form	= JForm::getInstance('form', JPATH_ROOT.DS.'components'.DS.'com_profile'.DS.'models'.DS.'forms'.DS.'details.xml');				$db		= JFactory::getDbo();		$db->setQuery($query);		$list	= $db->loadObjectList();				foreach ($list as $record)		{				if (!in_array($record->user_id, $userId))			{				$user = JXFactory::getUser($record->user_id);				$row = new stdClass();				$row->section = JText::_('profiles');				$row->text = $user->get('name');				$row->browsernav = 1; // 1 means open in new window/tab				$row->created = '';				$row->href = JRoute::_('index.php?option=com_profile&view=display&task=bio&user='.$user->username);				// Have to use this stupid way to get the label as JForm does not support retrieving field by name 				// when the field is having multilevel parent							$fieldInfo = explode('_', $record->field);				$fieldSets = $form->getFieldset($fieldInfo[0]);				$title = '';				foreach($fieldSets as $field)				{					if (str_replace('params_', '', $field->__get('id')) == $record->field)					{						$title = strip_tags($field->__get('label')).': ';						break;					}				}											$valueObj = json_decode($record->value);				if (is_null($valueObj))				{					$value = $record->value;				}				else				{					$value = '';					for ($j = 0; $j < count($valueObj); $j++)					{						foreach ($valueObj[$j] as $prop => $propInfo)						{							$value .= $propInfo.' ';						}						$value .= "\n";					}				}													$row->title = $title.$value;				$row->objectInfo = $user;								$userId[] = $record->user_id;				$records[] = $row;			}		}				return $records;	}		private function _getDateRange($range, $tblField = 'created')	{		switch($range)		{			case '2w':				$sql = ' `created` BETWEEN DATE_SUB(NOW(), INTERVAL 14 DAY) AND NOW() ';				break;			case '1m':				$sql = ' `created` BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() ';				break;			case '3m':				$sql = ' `created` BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() ';				break;			case '6m':				$sql = ' `created` BETWEEN DATE_SUB(NOW(), INTERVAL 6 MONTH) AND NOW() ';				break;			case '0a':			default:				$sql = '';				break;						}				return $sql;	}}